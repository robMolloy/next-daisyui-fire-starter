rules_version = '2';

function incomingAuth(){
  return request.auth;
}
function incomingData(){
  return request.resource.data;
}
function existingData(){
  return resource.data;
}
function userOwnsExistingDoc(){
  return incomingAuth().uid == existingData().uid;
}
function userOwnsIncomingDoc(){
  return incomingAuth().uid == incomingData().uid;
}

service cloud.firestore {
  match /databases/{database}/documents {
  
    function getUserData(uid){
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }
    function getChatGroupData(chatGroupId){
      return get(/databases/$(database)/documents/chatGroups/$(chatGroupId)).data;
    }

    function validateDiceRollDbEntry(data) {
      return data.createdAt is timestamp && incomingAuth().uid == incomingData().uid;
    }

		match /diceRolls/{id} {
      allow get: if userOwnsExistingDoc();
      allow list: if userOwnsExistingDoc();
      allow create: if userOwnsIncomingDoc() && validateDiceRollDbEntry(incomingData())
      allow update: if false;
      allow delete: if false;
    }

		match /readAndCreateCollection/{id} {
      allow get: if true;
      allow list: if true;
      allow create: if userOwnsIncomingDoc()
      allow update: if false;
      allow delete: if false;
    }
		match /readIfUserIsAdminAndOwnerCollection/{id} {
      allow read: if userOwnsExistingDoc() && getUserData(incomingAuth().uid).isAdmin;
    }
    
    match /readWriteIfUserIsInChatGroup/{id} {
      allow create: if userOwnsIncomingDoc() && incomingAuth().uid in getChatGroupData(incomingData().chatGroupId).userIds;
    }

    match /chatGroups/{id} {
      allow create: if incomingAuth().uid in incomingData().userIds;
    }
  }
}
